/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.javaforge.jqwicket.ui.uploadify;

import net.javaforge.jqwicket.JQFunction;
import net.javaforge.jqwicket.JQWidget;
import net.javaforge.jqwicket.ui.IJQOptions;

import org.apache.wicket.ajax.AjaxRequestTarget;

/**
 * Implementation of Uploadify jquery plugin: <a
 * href="http://www.uploadify.com">http://www.uploadify.com</a>
 * 
 * @author mkalina
 * 
 */
public interface IUploadify extends JQWidget<UploadifyOptions> {

	/**
	 * The .uploadify() function creates an instance of the Uploadify uploader
	 * to replace any DOM element on the page. Best practice is to apply the
	 * uploader against a unique ID, preferably a file input.
	 * 
	 * @return
	 */
	JQFunction uploadify();

	/**
	 * The .uploadify() function creates an instance of the Uploadify uploader
	 * to replace any DOM element on the page. Best practice is to apply the
	 * uploader against a unique ID, preferably a file input.
	 * 
	 * @param ajaxRequestTarget
	 */
	void uploadify(AjaxRequestTarget ajaxRequestTarget);

	/**
	 * The .uploadify() function creates an instance of the Uploadify uploader
	 * to replace any DOM element on the page. Best practice is to apply the
	 * uploader against a unique ID, preferably a file input.
	 * 
	 * @param options
	 *            A JSON object containing a set of name/value pairs that
	 *            correspond to the available options as noted in the
	 *            documentation.
	 * @return
	 */
	JQFunction uploadify(IJQOptions<?> options);

	/**
	 * The .uploadify() function creates an instance of the Uploadify uploader
	 * to replace any DOM element on the page. Best practice is to apply the
	 * uploader against a unique ID, preferably a file input.
	 * 
	 * @param ajaxRequestTarget
	 * @param options
	 *            A JSON object containing a set of name/value pairs that
	 *            correspond to the available options as noted in the
	 *            documentation.
	 */
	void uploadify(AjaxRequestTarget ajaxRequestTarget, IJQOptions<?> options);

	/**
	 * The .uploadifyCancel() method removes a file from the upload queue. If
	 * the file is currently uploading, the upload is canceled and the file is
	 * removed from the queue. When this method is called, the uploadifyCancel
	 * event fires and the onCancel function is fired.
	 * 
	 * @param id
	 *            The unique ID of the file you want to cancel. This ID is
	 *            generated by the Uploadify script when a file is selected and
	 *            added to the queue.
	 * @return
	 */
	JQFunction uploadifyCancel(String id);

	/**
	 * The .uploadifyCancel() method removes a file from the upload queue. If
	 * the file is currently uploading, the upload is canceled and the file is
	 * removed from the queue. When this method is called, the uploadifyCancel
	 * event fires and the onCancel function is fired.
	 * 
	 * @param ajaxRequestTarget
	 * @param id
	 *            The unique ID of the file you want to cancel. This ID is
	 *            generated by the Uploadify script when a file is selected and
	 *            added to the queue.
	 */
	void uploadifyCancel(AjaxRequestTarget ajaxRequestTarget, String id);

	/**
	 * The .uploadifyClearQueue() method triggers the uploadifyClearQueue event
	 * and any function assigned to the onClearQueue option. The default
	 * function cancels all uploads and clears all files from the upload queue.
	 * 
	 * @return
	 */
	JQFunction uploadifyClearQueue();

	/**
	 * The .uploadifyClearQueue() method triggers the uploadifyClearQueue event
	 * and any function assigned to the onClearQueue option. The default
	 * function cancels all uploads and clears all files from the upload queue.
	 * 
	 * @param ajaxRequestTarget
	 */
	void uploadifyClearQueue(AjaxRequestTarget ajaxRequestTarget);

	/**
	 * <pre>
	 * The .uploadifySettings() method can be used to change certain settings for an instance of the Uploadify uploader.  This method takes two(2) arguments.  The first argument is the name of the setting you would like to change.  The second argument is the new value you would like to use for the setting.  If the second argument is omitted, the method will return the current value of that setting.
	 * 
	 * The following settings can be changed:
	 * 
	 * buttonImg
	 * buttonText
	 * cancelImg
	 * fileDesc
	 * fileExt
	 * folder
	 * height
	 * hideButton
	 * script
	 * scriptData
	 * simUploadLimit
	 * sizeLimit
	 * width
	 * Note: When changing the value of the scriptData setting, use a JSON object containing name/value pairs as the value.  If a scriptData key already exists, the value will update.  If the key does not exist, it will be created.  To remove a key, set the value to null.  If updating the scriptData option via uploadifySettings(), it will not update due to synchronization issues with onOpen.  Instead, use the onSelectOnce function to change the scriptData variable during an auto upload.
	 * </pre>
	 * 
	 * @param name
	 *            The name of the setting you want to change/update.
	 * @param value
	 *            The value you would like to set.
	 * @return
	 */
	JQFunction uploadifySettings(String name, String value);

	/**
	 * <pre>
	 * The .uploadifySettings() method can be used to change certain settings for an instance of the Uploadify uploader.  This method takes two(2) arguments.  The first argument is the name of the setting you would like to change.  The second argument is the new value you would like to use for the setting.  If the second argument is omitted, the method will return the current value of that setting.
	 * 
	 * The following settings can be changed:
	 * 
	 * buttonImg
	 * buttonText
	 * cancelImg
	 * fileDesc
	 * fileExt
	 * folder
	 * height
	 * hideButton
	 * script
	 * scriptData
	 * simUploadLimit
	 * sizeLimit
	 * width
	 * Note: When changing the value of the scriptData setting, use a JSON object containing name/value pairs as the value.  If a scriptData key already exists, the value will update.  If the key does not exist, it will be created.  To remove a key, set the value to null.  If updating the scriptData option via uploadifySettings(), it will not update due to synchronization issues with onOpen.  Instead, use the onSelectOnce function to change the scriptData variable during an auto upload.
	 * </pre>
	 * 
	 * @param ajaxRequestTarget
	 * @param name
	 *            The name of the setting you want to change/update.
	 * @param value
	 *            The value you would like to set.
	 * 
	 */
	void uploadifySettings(AjaxRequestTarget ajaxRequestTarget, String name,
			String value);

	/**
	 * <pre>
	 * The .uploadifySettings() method can be used to change certain settings for an instance of the Uploadify uploader.  This method takes two(2) arguments.  The first argument is the name of the setting you would like to change.  The second argument is the new value you would like to use for the setting.  If the second argument is omitted, the method will return the current value of that setting.
	 * 
	 * The following settings can be changed:
	 * 
	 * buttonImg
	 * buttonText
	 * cancelImg
	 * fileDesc
	 * fileExt
	 * folder
	 * height
	 * hideButton
	 * script
	 * scriptData
	 * simUploadLimit
	 * sizeLimit
	 * width
	 * Note: When changing the value of the scriptData setting, use a JSON object containing name/value pairs as the value.  If a scriptData key already exists, the value will update.  If the key does not exist, it will be created.  To remove a key, set the value to null.  If updating the scriptData option via uploadifySettings(), it will not update due to synchronization issues with onOpen.  Instead, use the onSelectOnce function to change the scriptData variable during an auto upload.
	 * </pre>
	 * 
	 * @param name
	 *            The name of the setting you want to change/update.
	 * @param value
	 *            The value you would like to set.
	 * @param resetObject
	 *            Set this to true when updating the scriptData value to clear
	 *            the existing object.
	 * @return
	 */
	JQFunction uploadifySettings(String name, String value, boolean resetObject);

	/**
	 * /**
	 * 
	 * <pre>
	 * The .uploadifySettings() method can be used to change certain settings for an instance of the Uploadify uploader.  This method takes two(2) arguments.  The first argument is the name of the setting you would like to change.  The second argument is the new value you would like to use for the setting.  If the second argument is omitted, the method will return the current value of that setting.
	 * 
	 * The following settings can be changed:
	 * 
	 * buttonImg
	 * buttonText
	 * cancelImg
	 * fileDesc
	 * fileExt
	 * folder
	 * height
	 * hideButton
	 * script
	 * scriptData
	 * simUploadLimit
	 * sizeLimit
	 * width
	 * Note: When changing the value of the scriptData setting, use a JSON object containing name/value pairs as the value.  If a scriptData key already exists, the value will update.  If the key does not exist, it will be created.  To remove a key, set the value to null.  If updating the scriptData option via uploadifySettings(), it will not update due to synchronization issues with onOpen.  Instead, use the onSelectOnce function to change the scriptData variable during an auto upload.
	 * </pre>
	 * 
	 * @param ajaxRequestTarget
	 * @param name
	 *            The name of the setting you want to change/update.
	 * @param value
	 *            The value you would like to set.
	 * @param resetObject
	 *            Set this to true when updating the scriptData value to clear
	 *            the existing object.
	 */
	void uploadifySettings(AjaxRequestTarget ajaxRequestTarget, String name,
			String value, boolean resetObject);

	/**
	 * The .uploadifyUpload() method initiates the upload or one or all of the
	 * files in the queue.
	 * 
	 * @return
	 */
	JQFunction uploadifyUpload();

	/**
	 * The .uploadifyUpload() method initiates the upload or one or all of the
	 * files in the queue.
	 * 
	 * @param ajaxRequestTarget
	 */
	void uploadifyUpload(AjaxRequestTarget ajaxRequestTarget);

	/**
	 * The .uploadifyUpload() method initiates the upload or one or all of the
	 * files in the queue.
	 * 
	 * @param id
	 *            The unique ID of the file you want to upload. This ID is
	 *            generated by the Uploadify script when a file is selected and
	 *            added to the queue. If omitted, all files in the queue will
	 *            begin uploading.
	 * 
	 * @return
	 */
	JQFunction uploadifyUpload(String id);

	/**
	 * The .uploadifyUpload() method initiates the upload or one or all of the
	 * files in the queue.
	 * 
	 * @param ajaxRequestTarget
	 * @param id
	 *            The unique ID of the file you want to upload. This ID is
	 *            generated by the Uploadify script when a file is selected and
	 *            added to the queue. If omitted, all files in the queue will
	 *            begin uploading.
	 */
	void uploadifyUpload(AjaxRequestTarget ajaxRequestTarget, String id);

}
